from openai import OpenAI
import base64
from pydantic import BaseModel
import subprocess
import random

client = OpenAI()

class GameTurn(BaseModel):
    response: str
    new_location_in_ship: str
    image_description: str

class Probability(BaseModel):
    probability: float

class Game:
    def __init__(self, generate_images:bool):
        self._generate_images = generate_images
        self._user_history = ["I wake up and look around"]
        self._story_part_history = ["Beginning"]
        self.story_history = [""" 
You wake up, blinking groggily as your eyes adjust to the dim cabin lights. The hum of the ship's engines is a comforting, familiar sound, pulsing steadily beneath you. Your small bunk creaks as you sit up, glancing around the quiet crew quarters. It’s the start of day two on your transport run to the moon, a job you've done countless times before.

Your gaze settles on the faint glow of the wall terminal across the room, flashing softly. A quick look tells you the ship’s status is normal, but you remember there are some maintenance tasks you should probably check on. These long solo journeys rely heavily on regular inspections to keep the old freighter running smoothly.

There’s a checklist saved on the terminal for reference: routine diagnostics on the navigation system, an oxygen supply check, and recalibrating the cargo hold stabilizers. Each task is standard, but essential to avoid trouble later on. You also have a bit of free time if you want to explore other parts of the ship.

What would you like to do?"""]
        self._location_history = ["Crew Quarters"]
        self._turn = 1
        self._turn_prompt = """
We are playing a text based adventure game/story. Your role is to tell the next step in the story based on what the user has already done in the past, where the user is in the game world, and what the user has chosen to do next.

The theme of the game is a science fiction/horror narrative, and there are three stages to the story: a beginning, middle, and end. There will be somewhere between 20 - 30 turns in the narrative, depending on how long it takes the user to complete the game.

# This is the background of the universe the user is playing in:
The year is 2450 AD. Humanity had initial hopes of conquering the stars, but has in fact been limited to only successfully colonising the moon, but nothing more. This was not a technological issue, but rather a biological one. Humanity has possessed the technology required to reach mars and beyond since 2040, but the first ever human manned flight resulted in disaster, after all occupants of the spacecraft bound for mars perished shortly after travelling beyond the circumference of the lunar orbit. A few unmanned missions later discovered a certain previously unknown radiation belt that is impenetrable for biological life, just beyond the orbit of the moon. This discovery was previously unknown, due to unmanned flights not being equipped with the sensors capable of detecting the belt, since most scientists were unaware of its existence. In the years between 2040 and 2450, the colonisation of the moon by humans was a successful endeavour. Multiple rare elements and minerals have been since discovered, making the moon a centre of industrialisation, with the hopes that the rare elements discovered will contribute to the further technological advancements of the human race, and one day allow humans to break through the limiting post lunar radiation belt. As of this time (the current year 2450 as stated earlier), three main factions/states occupy the moon, with occasional tensions between them: Neo-China, Neo-Russia and Neo-Europe. These are not their actual names, but rather loose descriptors of what they are. After the American empire collapsed in 2067, Russia and China took hold of the Americas, with the remaining Americans migrating to Europe. Shortly after, tensions began forming between Russia and China, and the two (after gaining and losing various territories) formed new empires, fueled by the progress generated by the wars between them. Europe developed independently, and while Russia and Chinese cultures mixed frequently (as territories were occupied and deoccupied), Europe developed a mostly separate technocratic culture. Some of this technocratic outlook has influenced Neo-Russia and Neo-China, but for the most part these two states have maintained their general mystical outlook on life, a kind of half way between scientism and spirituality. When our story begins, Neo-Russia and Neo-China, after a period of peace with Neo-Europe for 40 years, are beginning to gear up for an alliance against Neo-Europe and possible war on the moon, after it became apparent that Neo-Europe is on the verge of a technological breakthrough which would enable them to war against the other factions and take over the moon.

# This is the background of the user:
The user is a 32 year old Neo-Russian male. He speaks Russian-English, a new language which developed after Russia invaded America. It is essentially purely english in words, but with russian sentence structure and grammar. He is the only crew member on a space freighter owned by shipping company Tsartex, and he is on a shipping transport run to the moon, a journey which still takes 3 days. He has a family with a wife and two children, one of which is studying at university on Earth, and the other is working as a scientist on the moon for one of the Neo-Russian colonies. He is strong and agile, and very useful with his hands. His has the knowledge of a good mechanic, i.e. has the working class mechanic common sense in him.

# The description of the ship and technology:
The ship is a large single crew freighter, one of the most reliable types, but nearing the end of its service life. The ship is designed to be operated by one crew member only. As such, each room has a small terminal which can be used to send commands to the ship. When the user asks to access the terminal, you must pretend to be a futuristic terminal emulator. The terminal on the ship can control all aspects of the ship, including engines, oxygen levels etc.

## Here is an adjacency list that describes the layout of the ship:
```
Hanger/Loading Bay: Escape Pod 1, Escape Pod 2, Main Access Corridor, Main Airlock, Main Storage Hall
Escape Pod 1: Hanger/Loading Bay
Escape Pod 2: Hanger/Loading Bay
Main Access Corridor: Hanger/Loading Bay, Main Storage Hall, Crew Quarters, Bridge, Storage Hall 1, Storage Hall 2, Storage Hall 3, Storage Hall 4, Storage Hall 5, Storage Hall 6, Storage Hall 7
Main Airlock: Hanger/Loading Bay
Main Storage Hall: Hanger/Loading Bay, Main Access Corridor, Crew Quarters, Storage Hall 1, Storage Hall 2, Storage Hall 3, Storage Hall 4, Storage Hall 5, Storage Hall 6, Storage Hall 7, Storage Hall 8, Storage Hall 9, Storage Hall 10, Storage Hall 11, Storage Hall 12, Storage Hall 13, Storage Hall 14, Storage Hall 15
Storage Hall 1: Main Storage Hall, Main Access Corridor
Storage Hall 2: Main Storage Hall, Main Access Corridor
Storage Hall 3: Main Storage Hall, Main Access Corridor
Storage Hall 4: Main Storage Hall, Main Access Corridor
Storage Hall 5: Main Storage Hall, Main Access Corridor
Storage Hall 6: Main Storage Hall, Main Access Corridor
Storage Hall 7: Main Storage Hall, Main Access Corridor
Storage Hall 8: Main Storage Hall
Storage Hall 9: Main Storage Hall
Storage Hall 10: Main Storage Hall
Storage Hall 11: Main Storage Hall
Storage Hall 12: Main Storage Hall
Storage Hall 13: Main Storage Hall
Storage Hall 14: Main Storage Hall
Storage Hall 15: Main Storage Hall
Crew Quarters: Main Storage Hall, Main Access Corridor, Food Hall, Bridge
Food Hall: Crew Quarters
Bridge: Main Access Corridor, Crew Quarters, Observation Deck
Observation Deck: Bridge
```

## Here are loose descriptions of each room. Note, this description does not contain a complete list of all the items in the room, add more items to the rooms that you would expect to find in the rooms, base on the partial/minimal descriptions given here:

### Escape Pod 1:
The pod is dusty as it has not been used in a very long time. The pod contains controls for the escape pod, food to last several days.

### Escape Pod 2:
The pod is dusty as it has not been used in a very long time. The pod contains controls for the escape pod, food to last several days.

### Main access corridor:
This corridor is used as a way to get quick access to the core parts of the ship. As the ship is very large, there is both a normal walkway, but also a horizontal lift that allows the user to travel faster up and down the corridor. If walking, it would take half an hour to travel up and down the ship using the corridor, if using the elevator, it only takes 4 minutes to get from one end of the ship to the other. This should give you an idea of the scale of the ship.

### Hanger/Loading Bay:
The Hanger/Loading Bay is a spacious, industrial area where cargo and supplies are loaded and unloaded. It contains several crates and large storage containers, each labeled with barcodes and color-coded tags. You’ll also find repair tools, a loading crane, and a hover lift for moving heavy equipment. This area has a control panel that monitors docking activities and a loudspeaker system to communicate with incoming craft.

### Main Airlock:
The Main Airlock is the primary access point for entering or leaving the ship. It has a reinforced, double-door system with a decontamination chamber in between. The walls are lined with emergency suits and breathing apparatuses. There’s also a set of lockers containing space tools and tether cables for secure external ship repairs.

### Main Storage Hall:
This massive, dimly lit hall houses various supply cabinets, sealed storage containers, and cargo crates. Supplies include rations, emergency equipment, and maintenance tools. The room has automated storage systems that can retrieve items from high shelves. Each section is equipped with a scanning terminal for inventory control.

### Storage Halls 1–7:
Each of these storage halls is smaller than the Main Storage Hall and holds specialized supplies. Storage Hall 1 has mechanical parts, including spare gears, bolts, and machine lubricants. Storage Hall 2 contains medical supplies like first aid kits, medications, and surgical tools. Storage Hall 3 houses engineering tools, welding torches, and power cells. Storage Hall 4 is filled with non-perishable rations and water tanks. Storage Hall 5 holds environmental suits and oxygen canisters, while Storage Hall 6 is designated for hazardous materials, with strict containment measures in place. Storage Hall 7 contains emergency power generators and additional fuel cells.

### Storage Halls 8–15:
These halls serve as backup storage areas. Storage Hall 8 has additional food and water supplies. Storage Hall 9 is stocked with bedding and spare uniforms. Storage Hall 10 contains cleaning supplies and disinfectants. Storage Hall 11 has spare furniture, including seats, tables, and bunks. Storage Hall 12 holds technical manuals and data storage drives. Storage Hall 13 contains miscellaneous electronics, such as portable lights, batteries, and communication devices. Storage Hall 14 is filled with repair materials, including sealants and patches. Storage Hall 15 is used to store classified or sensitive cargo and is heavily secured with access controls.

### Crew Quarters:
The Crew Quarters is a cozy, semi-private space where crew members sleep and relax. Each sleeping pod has a bed, storage drawers, and a small screen for entertainment. There are a few shared tables, a recreational area with games and books, and a small kitchenette. A communal bathroom with showers is also located here, along with emergency lockers containing basic survival gear.

### Food Hall:
The Food Hall is the main dining area for the crew, featuring a large central table and smaller individual tables. An automated food dispenser provides pre-packaged meals and beverages. The room is equipped with storage cabinets holding utensils, plates, and emergency food supplies. There’s also a small pantry with non-perishable items and a kitchenette for those who prefer to prepare their meals manually.

### Bridge:
The Bridge is the command center of the ship, with several control panels, navigation screens, and communication equipment. The captain’s chair is centered, with other stations around it for navigation, weapons, and system monitoring. The room is outfitted with a central holographic display for tactical planning, as well as emergency controls and communication links to other critical areas of the ship.

### Observation Deck:
The Observation Deck is a quiet area designed for relaxation, with large windows offering a view of space. Comfortable seating is available, along with viewing scopes and basic navigation tools for stargazing. There’s a small shelf with books on astronomy and a telescope mounted near the largest window. The walls contain emergency oxygen masks in case of a hull breach.


# This is the overall story the user should play:
The user has woken up at the start of day 2 on his three day journey. Everything is normal for a while, until the alarm starts ringing on the bridge. This alarm is ringing because the ship has detected an anomaly out in space, a sudden burst of energy, but it's difficult to tell exactly what it is, the sensors are confused. Shortly after this alarm goes off (one or two turns), something impacts the ship and tares a big hole in one of the rooms that the user is not currently in. The ship locks that room away to prevent the internal atmosphere escaping. The thing that has penetrated this ship is actually an alien pod. The alien itself is a very slow, black, shiny shape shifting blob, that can take any shape. The alien is trying to attack the user. The alien has some weaknesses, but the user has to work them out. If the user manages to work out one of the weaknesses, he kills the alien and wins the game. If he does not, or is careless in some other way, he will die and lose the game.

# Beginning (Turn 0 - 7):
The alarm has not gone off and the alien has not arrived in these turns. The user may choose to explore the ship, and learn about the lore of the universe, or they may choose to do some other activity. The user is free to do whatever they want, but you should remind the user that they have some tasks to complete for the maintenance of the ship and the continuation of the journey to the moon. Make up the tasks as necessary, but they should make sense in the context that I have given you. One of these tasks should go wrong at this point, and there should be some stress in trying to resolve it, but the task should get resoved a couple of turns later.

# Middle (Turn 8 - 15):
This is the main struggle in the story. At the start of these turns, the alarm should sound, and then shortly after the alien should penetrate the ship. The user is still free to do whatever they want, but the alien should also start pursuing the user in these turns. Remember to make this suspenseful. The discovery of the alien should be gradual, and any encounters with it should be tense. The user is also free to run away from the alien, but remember the alien will slowly pursue him through the ship. Maybe there are a few attacks from the alien here, but if there are, they are yet unsuccessful.

# End (Turn 16 - 25):
This is the part where each interaction of the alien with the user or user with the alien can result in either the alien dying, the user dying, or the user escaping the alien. If the user dies, the user loses and the game ends on that turn. If the user manages to kill the alien, the user wins and the game ends on that turn. If the user fails to kill the alien but manages to escape, or something else happens, the game does not yet end and we continue to the next turn. Note, the game could end at any of the turns between turn 16 and 25, just make it clear that the game has indeed ended on one of these turns, and any further inputs from the user should just be responded to with a message saying the game has ended.

# Some general rules that should be followed throughout the story. These rules cannot be broken!:
1) The user can never go in any other rooms apart from those mentioned above. These are the only rooms that exist on the ship, if he tries to go to a room that doesn't exist, tell him it doesn't exist!
2) The story must be consisten with all the information given, including the previous turns.
3) Anything could happen, as long as it makes sense to the story. Do whatever the user tells you, as long as it doesn't break the laws of logic or the universe.
4) If the user says "But I failed to do this task.", it means whatever the user tried to do should be unsuccessful (E.g. if the user says "Shoot the alien. But I failed to do this task", it means the user tried to shoot the alient, but he missed, or some other reason why he failed.)


You can work out where the user is in the story based on the turn they are on, and the history of turns. The history is given below:
```
The user's history of turns:
{turn_history}
```

The user is currently on turn {turn}. He is in the {story_part} part of the story.

In your response, also include an image description of what the user sees, which will be used to generate an image of the turn.
            """
        # The game is broken down into stages. You can tell how many turns have taken place in the current stage by looking at the user's history of turns. Here is the description of the current stage:
        self._alien_prompt = """
# This is the description of the alien:
The alien is a slow, black, shiny shape shifting blob, that can take any shape.
            """
        self._stages = {
            'Exploration of the ship and completion of maintenance tasks':'The user has woken up at the start of day 2 on his three day journey. The user may choose to explore the ship, and learn about the lore of the universe, or they may choose to do some other activity. The user is free to do whatever they want, but you should remind the user that they have some tasks to complete for the maintenance of the ship and the continuation of the journey to the moon. Make up the tasks as necessary, but they should make sense in the context that I have given you. One of these tasks should go wrong at this point, and there should be some stress in trying to resolve it, but the task should get resoved a couple of turns later.',
            'Alarms and an unknown entity (alien) pierces the ship':'The alarm starts to ring on the bridge. This is the main struggle in the story. At the start of these turns, the alarm should sound in the bridge. This alarm is ringing because the ship has detected an anomaly out in space, a sudden burst of energy, but its difficult to tell exactly what it is, the sensors are confused. Shortly after this alarm goes off (wait one or two turns), something impacts the ship and tares a big hole in one of the rooms that the user is not currently in. The ship locks that room away to prevent the internal atmosphere escaping. The thing that has penetrated this ship is actually an alien pod. The alien itself is a very slow, black, shiny shape shifting blob, that can take any shape. The alien is trying to attack the user. The alien has some weaknesses, but the user has to work them out.  The user is still free to do whatever they want, but the alien should also start pursuing the user in these turns. Remember to make this suspenseful. The discovery of the alien should be gradual, and any encounters with it should be tense. The user is also free to run away from the alien, but remember the alien will slowly pursue him through the ship. Maybe there are a few attacks from the alien here, but if there are, they are yet unsuccessful.',
        }

    #def select_stage(self, previous_stage:str, turn):


    def take_turn(self, user_prompt: str):
        turn_history = ""
        for i, user_history in enumerate(self._user_history):
            turn_history = turn_history + f"Turn {i}: User prompt: {{ {user_history} }}, Story reply: {{ {self.story_history[i]} }}, Location: {{ {self._location_history[i]} }}, Story Part: {{ {self._story_part_history[i]} }}\n\n"
        story_part = "Beginning"
        if self._turn > 7:
            story_part = "Middle"
        if self._turn > 15:
            story_part = "End"

        system_prompt = self._turn_prompt.format(turn = self._turn, turn_history = turn_history, story_part = story_part)

        # Check if turn will complete successfully
        is_task_successful = self.does_task_succeed(self.story_history[-1], user_prompt)
        if not is_task_successful:
            user_prompt += ". But I failed to do this task."
        
        completion = client.beta.chat.completions.parse(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_prompt}
            ],
            response_format=GameTurn
          )

        response = completion.choices[0].message.parsed
        if response:
            self._turn += 1
            self._user_history.append(user_prompt)
            self._story_part_history.append(story_part)
            self.story_history.append(response.response)
            self._location_history.append(response.new_location_in_ship)

            if self._generate_images == True:
                image_response = client.images.generate(
                  model="dall-e-3",
                  response_format="b64_json",
                  prompt=response.image_description,
                  size="1024x1024",
                  quality="standard",
                  n=1,
                )
                if image_response.data[0].b64_json:
                    imgdata = base64.b64decode(image_response.data[0].b64_json)
                    image_filename = 'generated_image.jpg'  # I assume you have a way of picking unique filenames
                    with open(image_filename, 'wb') as f:
                        f.write(imgdata)
                    subprocess.call(["firefox", image_filename])

            # debug
            # print(system_prompt)
            return response.response

    def does_task_succeed(self, situation:str, task:str):
        system_prompt = f"""
You are a probability calculator. You task is to return the probability of a task completing successfully, or failing. You should return a float between 0 (if the task is 100% likely to fail) or 100 (if the task is 100% likely to succeed). The situation before attempting the task is as follows:
            {{ {situation} }}
            """
        prompt = f"My task is: {task}"
        completion = client.beta.chat.completions.parse(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": prompt}
            ],
            response_format=Probability
          )
        probability = completion.choices[0].message.parsed
        if probability:
            is_task_successful = random.uniform(0, 1)*100 < probability.probability
            return is_task_successful


if __name__ == '__main__':
    game = Game(True)
    print(game.story_history[0])
    for i in range(25):
        user_prompt = input()
        response = game.take_turn(user_prompt)
        print("---")
        print(response)
        print("---")
